{"info":{"type":"runner","start":"2024-05-15T00:09:03.690Z","end":"2024-05-15T00:09:17.405Z","_duration":13715,"cid":"0-1","capabilities":{"acceptInsecureCerts":false,"browserName":"firefox","browserVersion":"125.0.3","moz:accessibilityChecks":false,"moz:buildID":"20240425211020","moz:geckodriverVersion":"0.34.0","moz:headless":false,"moz:platformVersion":"10.0","moz:processID":31936,"moz:profile":"C:\\Users\\Uros\\AppData\\Local\\Temp\\rust_mozprofileMlzyqy","moz:shutdownTimeout":60000,"moz:webdriverClick":true,"moz:windowless":false,"pageLoadStrategy":"normal","platformName":"windows","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:125.0) Gecko/20100101 Firefox/125.0","wdio:driverPID":23980,"sessionId":"eaa206de-5da4-4296-b8a5-308d4aee6dce"},"sanitizedCapabilities":"firefox.125_0_3.windows","config":{"protocol":"http","hostname":"0.0.0.0","path":"/","capabilities":{"browserName":"firefox","moz:firefoxOptions":{"binary":"C:\\Users\\Uros\\AppData\\Local\\Mozilla Firefox\\firefox.exe"}},"logLevel":"silent","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"enableDirectConnect":true,"strictSSL":true,"cacheDir":"C:\\Users\\Uros\\AppData\\Local\\Temp","port":49377,"requestedCapabilities":{"browserName":"firefox","moz:firefoxOptions":{"binary":"C:\\Users\\Uros\\AppData\\Local\\Mozilla Firefox\\firefox.exe"}},"automationProtocol":"webdriver","waitforInterval":500,"waitforTimeout":10000,"onReload":[],"beforeCommand":[],"afterCommand":[],"rootDir":"C:\\Work\\Solflare","specs":["./test/specs/**/*.js"],"suites":{},"exclude":[],"groupLogsByTestSpec":false,"excludeDriverLogs":[],"bail":0,"framework":"mocha","reporters":["spec","html-nice"],"services":["reportportal"],"maxInstances":10,"maxInstancesPerCapability":100,"injectGlobals":true,"filesToWatch":[],"execArgv":[],"runnerEnv":{},"runner":"local","shard":{"current":1,"total":1},"specFileRetries":0,"specFileRetriesDelay":0,"specFileRetriesDeferred":false,"reporterSyncInterval":100,"reporterSyncTimeout":5000,"cucumberFeaturesWithLineNumbers":[],"autoCompileOpts":{"autoCompile":true,"tsNodeOpts":{"transpileOnly":true},"babelOpts":{}},"mochaOpts":{"timeout":60000,"ui":"bdd"},"jasmineOpts":{"defaultTimeoutInterval":10000},"cucumberOpts":{"timeout":10000},"onPrepare":[null],"onWorkerStart":[],"onWorkerEnd":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[null],"afterTest":[null],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[null],"onComplete":[null],"beforeAssertion":[],"afterAssertion":[],"beforeFeature":[],"beforeScenario":[],"beforeStep":[],"afterStep":[],"afterScenario":[],"afterFeature":[],"_":["run","run"],"$0":"node_modules\\@wdio\\cli\\bin\\wdio.js","config-path":"wdio.conf.js","ignoredWorkerServices":[]},"specs":["file:///C:/Work/Solflare/test/specs/testThree.js"],"sessionId":"eaa206de-5da4-4296-b8a5-308d4aee6dce","isMultiremote":false,"instanceOptions":{"eaa206de-5da4-4296-b8a5-308d4aee6dce":{"protocol":"http","hostname":"0.0.0.0","path":"/","capabilities":{"browserName":"firefox","moz:firefoxOptions":{"binary":"C:\\Users\\Uros\\AppData\\Local\\Mozilla Firefox\\firefox.exe"}},"logLevel":"silent","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"enableDirectConnect":true,"strictSSL":true,"cacheDir":"C:\\Users\\Uros\\AppData\\Local\\Temp","port":49377,"requestedCapabilities":{"browserName":"firefox","moz:firefoxOptions":{"binary":"C:\\Users\\Uros\\AppData\\Local\\Mozilla Firefox\\firefox.exe"}},"automationProtocol":"webdriver","waitforInterval":500,"waitforTimeout":10000,"onReload":[],"beforeCommand":[],"afterCommand":[],"rootDir":"C:\\Work\\Solflare","specs":["./test/specs/**/*.js"],"suites":{},"exclude":[],"groupLogsByTestSpec":false,"excludeDriverLogs":[],"bail":0,"framework":"mocha","reporters":["spec","html-nice"],"services":["reportportal"],"maxInstances":10,"maxInstancesPerCapability":100,"injectGlobals":true,"filesToWatch":[],"execArgv":[],"runnerEnv":{},"runner":"local","shard":{"current":1,"total":1},"specFileRetries":0,"specFileRetriesDelay":0,"specFileRetriesDeferred":false,"reporterSyncInterval":100,"reporterSyncTimeout":5000,"cucumberFeaturesWithLineNumbers":[],"autoCompileOpts":{"autoCompile":true,"tsNodeOpts":{"transpileOnly":true},"babelOpts":{}},"mochaOpts":{"timeout":60000,"ui":"bdd"},"jasmineOpts":{"defaultTimeoutInterval":10000},"cucumberOpts":{"timeout":10000},"onPrepare":[null],"onWorkerStart":[],"onWorkerEnd":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[null],"afterTest":[null],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[null],"onComplete":[null],"beforeAssertion":[],"afterAssertion":[],"beforeFeature":[],"beforeScenario":[],"beforeStep":[],"afterStep":[],"afterScenario":[],"afterFeature":[],"_":["run","run"],"$0":"node_modules\\@wdio\\cli\\bin\\wdio.js","config-path":"wdio.conf.js","ignoredWorkerServices":[]}},"retry":0,"failures":0,"retries":0},"metrics":{"passed":1,"skipped":0,"failed":0,"duration":13715,"start":"2024-05-15T00:09:03.690Z","end":"2024-05-15T00:09:17Z"},"title":"Test Report Title","suites":[{"type":"suite:start","start":"2024-05-15T00:09:03.701Z","end":"2024-05-15T00:09:15.557Z","_duration":11854,"uid":"suite-0-0","cid":"0-1","file":"C:\\Work\\Solflare\\test\\specs\\testThree.js","title":"Test #3","fullTitle":"Test #3","tests":[{"type":"test","start":"2024-05-15T00:09:03.702Z","end":"2024-05-15T00:09:15.548Z","_duration":11846,"uid":"test-00-0","cid":"0-1","title":"adds new wallets and verifies they exist in Portfolio","fullTitle":"Test #3.adds new wallets and verifies they exist in Portfolio","output":[],"retries":0,"parent":"Test #3","state":"passed","body":"async () => {\n\n        Logger.info(\"Opening Solflare website\");\n        await HomePage.open();\n        Logger.info(\"Clicking Access Wallet button\");\n        await HomePage.clickAccessWalletButton ();\n        Logger.info(\"Clicking I Need a Wallet button\");\n        await OnboardPage.clickINeedANewWalletButton ();\n\n        Logger.info(\"Collecting the recovery phrase\");\n        const completeRecoveryPhrase = await CreatePage.compilePhraseString(); // get the complete recovery phrase\n        const phraseArray = completeRecoveryPhrase.split(' '); // put the phrase in an array split by space character\n\n        Logger.info(\"Clicking the I Saved my Recovery Phrase button\");\n        await CreatePage.clickSavedMyRecoveryPhraseButton ();\n        Logger.info(\"Populating phrase fields with recovery phrase\");\n        await CreatePage.populatePhraseFields (...phraseArray); // use the phrase array as arguments for the method\n        Logger.info(\"Clicking on the Continue button\");\n        await CreatePage.clickContinueButton();\n        Logger.info(\"Entering and confirming the password\");\n        await CreatePage.enterPassword(\"Test1234!\");\n        await CreatePage.confirmPassword(\"Test1234!\");\n        await CreatePage.clickContinueButton();\n\n        Logger.info(\"Clicking the Enter Solana button\");\n        await SuccessPage.clickEnterSolanaButton();\n        Logger.info(\"Clicking the Wallet Management button\");\n        await PortfolioPage.clickWalletManagementButton();\n\n        Logger.info(\"Verifying that Main Wallet is displayed\");\n        expect(WalletManagementPage.mainWalletListItem).toBeDisplayed();\n        Logger.info(\"Performing Wallet Management actions\")\n        await WalletManagementPage.clickAddButton();\n        await WalletManagementPage.clickManageRecoveryPhraseButton();\n        Logger.info(\"Verify that the first toggle is set to ON and disabled\");\n        await expect (WalletManagementPage.firstToggle).toHaveAttribute(\"data-state\", \"checked\"); // separated these two\n        await expect (WalletManagementPage.firstToggle).toHaveAttribute(\"data-disabled\"); // because only one might be working\n        Logger.info(\"Setting the third and fourth toggle to ON\");\n        await WalletManagementPage.setThirdToggleToOn();\n        await WalletManagementPage.setFourthToggleToOn();\n\n        Logger.info(\"Collecting wallet codes\");\n        const mainWalletCode = await WalletManagementPage.getMainWalletCode(); // take note of the wallet codes\n        const wallet3Code = await WalletManagementPage.getThirdWalletCode(); // for main and other two wallets\n        const wallet4Code = await WalletManagementPage.getFourthWalletCode();\n        Logger.info(\"Saving the changes\");\n        await WalletManagementPage.clickSaveButton();\n\n        Logger.info(\"Verifying all wallets are present\");\n        expect (WalletManagementPage.mainWalletSubtitle).toHaveText(mainWalletCode); // compare text of wallet elements\n        expect (WalletManagementPage.secondWalletSubtitle).toHaveText(wallet3Code); // to collected codes of wallets\n        expect (WalletManagementPage.thirdWalletSubtitle).toHaveText(wallet4Code);\n\n        }","events":[],"errorIndex":0}],"hooks":[],"suites":[],"parent":"","hooksAndTests":[{"type":"test","start":"2024-05-15T00:09:03.702Z","end":"2024-05-15T00:09:15.548Z","_duration":11846,"uid":"test-00-0","cid":"0-1","title":"adds new wallets and verifies they exist in Portfolio","fullTitle":"Test #3.adds new wallets and verifies they exist in Portfolio","output":[],"retries":0,"parent":"Test #3","state":"passed","body":"async () => {\n\n        Logger.info(\"Opening Solflare website\");\n        await HomePage.open();\n        Logger.info(\"Clicking Access Wallet button\");\n        await HomePage.clickAccessWalletButton ();\n        Logger.info(\"Clicking I Need a Wallet button\");\n        await OnboardPage.clickINeedANewWalletButton ();\n\n        Logger.info(\"Collecting the recovery phrase\");\n        const completeRecoveryPhrase = await CreatePage.compilePhraseString(); // get the complete recovery phrase\n        const phraseArray = completeRecoveryPhrase.split(' '); // put the phrase in an array split by space character\n\n        Logger.info(\"Clicking the I Saved my Recovery Phrase button\");\n        await CreatePage.clickSavedMyRecoveryPhraseButton ();\n        Logger.info(\"Populating phrase fields with recovery phrase\");\n        await CreatePage.populatePhraseFields (...phraseArray); // use the phrase array as arguments for the method\n        Logger.info(\"Clicking on the Continue button\");\n        await CreatePage.clickContinueButton();\n        Logger.info(\"Entering and confirming the password\");\n        await CreatePage.enterPassword(\"Test1234!\");\n        await CreatePage.confirmPassword(\"Test1234!\");\n        await CreatePage.clickContinueButton();\n\n        Logger.info(\"Clicking the Enter Solana button\");\n        await SuccessPage.clickEnterSolanaButton();\n        Logger.info(\"Clicking the Wallet Management button\");\n        await PortfolioPage.clickWalletManagementButton();\n\n        Logger.info(\"Verifying that Main Wallet is displayed\");\n        expect(WalletManagementPage.mainWalletListItem).toBeDisplayed();\n        Logger.info(\"Performing Wallet Management actions\")\n        await WalletManagementPage.clickAddButton();\n        await WalletManagementPage.clickManageRecoveryPhraseButton();\n        Logger.info(\"Verify that the first toggle is set to ON and disabled\");\n        await expect (WalletManagementPage.firstToggle).toHaveAttribute(\"data-state\", \"checked\"); // separated these two\n        await expect (WalletManagementPage.firstToggle).toHaveAttribute(\"data-disabled\"); // because only one might be working\n        Logger.info(\"Setting the third and fourth toggle to ON\");\n        await WalletManagementPage.setThirdToggleToOn();\n        await WalletManagementPage.setFourthToggleToOn();\n\n        Logger.info(\"Collecting wallet codes\");\n        const mainWalletCode = await WalletManagementPage.getMainWalletCode(); // take note of the wallet codes\n        const wallet3Code = await WalletManagementPage.getThirdWalletCode(); // for main and other two wallets\n        const wallet4Code = await WalletManagementPage.getFourthWalletCode();\n        Logger.info(\"Saving the changes\");\n        await WalletManagementPage.clickSaveButton();\n\n        Logger.info(\"Verifying all wallets are present\");\n        expect (WalletManagementPage.mainWalletSubtitle).toHaveText(mainWalletCode); // compare text of wallet elements\n        expect (WalletManagementPage.secondWalletSubtitle).toHaveText(wallet3Code); // to collected codes of wallets\n        expect (WalletManagementPage.thirdWalletSubtitle).toHaveText(wallet4Code);\n\n        }","events":[],"errorIndex":0}]}],"reportFile":"C:\\Work\\Solflare\\reports\\html-reports\\report-0-1.html","browserName":"not specified"}